#!/usr/bin/env python3

# import necessary modules
import boto3
import sys
import json
import datetime

# set up AWS endpoint URL
attrs = {
  'endpoint_url': 'http://localhost:8000'
}

# check if script was run with "prod" argument
if len(sys.argv) == 2:
  if "prod" in sys.argv[1]:
    attrs = {}

# create DynamoDB client object
dynamodb = boto3.client('dynamodb', **attrs)

# set up table name and message group UUID
table_name = 'cruddur-messages'
message_group_uuid = "5ae290ed-55d1-47a0-bc6d-fe2bc2700399"

# define query parameters
query_params = {
  'TableName': table_name,
  'ScanIndexForward': False,
  'Limit': 20,
  'ReturnConsumedCapacity': 'TOTAL',
  'KeyConditionExpression': 'pk = :pk AND begins_with(sk,:year)', # filter on partition key and sort key prefix
  'ExpressionAttributeValues': {
    ':year': {'S': '2023'}, # year to match in sort key prefix
    ':pk': {'S': f"MSG#{message_group_uuid}"} # message group UUID as partition key
  }
}

# run query on DynamoDB table
response = dynamodb.query(**query_params)

# print JSON-formatted response and consumed capacity
print(json.dumps(response, sort_keys=True, indent=2))
print(json.dumps(response['ConsumedCapacity'], sort_keys=True, indent=2))

# extract and print message details from query results
items = response['Items']
reversed_array = items[::-1]

for item in reversed_array:
  sender_handle = item['user_handle']['S']
  message = item['message']['S']
  timestamp = item['sk']['S']
  
  # format timestamp as human-readable datetime
  dt_object = datetime.datetime.strptime(timestamp, '%Y-%m-%dT%H:%M:%S.%f%z')
  formatted_datetime = dt_object.strftime('%Y-%m-%d %I:%M %p')
  
  # print formatted message details
  print(f'{sender_handle: <12}{formatted_datetime: <22}{message[:40]}...')
