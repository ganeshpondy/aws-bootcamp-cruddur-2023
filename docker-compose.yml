version: "3.8"
services:
  backend-flask:
    env_file:
      - backend-flask.env
    build: ./backend-flask
    ports:
      - "4567:4567"
    volumes:
      - ./backend-flask:/backend-flask
    #Health Check Steps
    # healthcheck:
    #   test: ["CMD-SHELL", "curl -f http://localhost:4567 || exit 1"]
    #   interval: 1m30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 40s

  frontend-react-js:
    env_file:
      - frontend-react-js.env
    build: ./frontend-react-js
    ports:
      - "3000:3000"
    volumes:
      - ./frontend-react-js:/frontend-react-js
    #Health Check Steps
    # healthcheck:
    #   #test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
    #   interval: 1m30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 20s

# DynamoDB NoSQL
  dynamodb-local:
    # https://stackoverflow.com/questions/67533058/persist-local-dynamodb-data-in-volumes-lack-permission-unable-to-open-databa
    # We needed to add user:root to get this working.
    user: root
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath ./data"
    image: "amazon/dynamodb-local:latest"
    container_name: dynamodb-local
    ports:
      - "8000:8000"
    volumes:
      - "./docker/dynamodb:/home/dynamodblocal/data"
    working_dir: /home/dynamodblocal

# Postgres SQL
  db:
    image: postgres:13-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - '5432:5432'
    volumes: 
      - db:/var/lib/postgresql/data
  xray-daemon:
    hostname: xray-daemon
    image: "amazon/aws-xray-daemon"
    environment:
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
      AWS_REGION: "ap-south-1"
    command:
      - "xray -o -b xray-daemon:2000"
    ports:
      - 2000:2000/udp
  # # otel Collector
  # otel-collector:
  #   image: otel/opentelemetry-collector
  #   command: [--config=/etc/otel-collector-config.yaml]
  #   volumes:
  #     - ./frontend-react-js/otel-collector-config.yaml:/etc/otel-collector-config.yaml
  #   ports:
  #     - 1888:1888 # pprof extension
  #     - 8888:8888 # Prometheus metrics exposed by the collector
  #     - 8889:8889 # Prometheus exporter metrics
  #     - 13133:13133 # health_check extension
  #     - 4317:4317 # OTLP gRPC receiver
  #     - 4318:4318 # OTLP http receiver
  #     - 55679:55679 # zpages extension

# the name flag is a hack to change the default prepend folder
# name when outputting the image names
networks: 
  cruddur-net:
    driver: bridge
    name: cruddur-net

volumes:
  db:
    driver: local